{"version":3,"sources":["webpack:///./components/clipboard-copy.tsx","webpack:///./routes/home/style.css","webpack:///./components/game/local.tsx","webpack:///./routes/home/index.tsx"],"names":["ClipboardCopy","copyText","isCopied","setIsCopied","useState","type","value","readOnly","onClick","async","text","navigator","clipboard","writeText","document","execCommand","copyTextToClipboard","then","setTimeout","catch","err","console","error","Modal","setAppElement","LocalGame","boardSize","forceUpdate","useUpdater","game","useRef","Gomoku","width","height","current","isGameOver","addUpdateHandler","class","style","root","onCellClick","location","placeCell","row","col","content","top","left","right","bottom","marginRight","transform","onRequestClose","isOpen","winner","resetButton","reset","Home","mode","setMode","PlayMode","UNSET","setBoardSize","connection","setConnection","id","setId","peer","setPeer","useEffect","REMOTE","newId","uuid","newPeer","Peer","on","conn","log","border","boxShadow","overlay","background","for","name","onChange","e","target","selected","LOCAL","window","origin","host"],"mappings":"2FAGO,SAASA,GAAc,SAAEC,IAC5B,MAAOC,EAAUC,GAAeC,aAAS,GAsBzC,OACI,uBACI,qBAAOC,KAAK,OAAOC,MAAOL,EAAUM,UAAQ,IAC5C,sBAAQC,QAfQ,MARxBC,eAAmCC,GAC/B,MAAI,cAAeC,gBACFA,UAAUC,UAAUC,UAAUH,GAEpCI,SAASC,YAAY,QAAQ,EAAML,EAEjD,EAGGM,CAAoBf,GACfgB,MAAK,KACFd,GAAY,GACZe,YAAW,KACPf,GAAY,EAAZ,GACD,KAFH,IAIHgB,OAAOC,IACJC,QAAQC,MAAMF,EAAd,GARR,GAeQ,wBAAOlB,EAAW,UAAY,SAI7C,C,mCCjCc,EAAQ,cAAR,EAAsC,uBAAtC,EAAsE,gB,yGCQrFqB,IAAMC,cAAc,QA6CLC,MA3CG,EAAGC,YAAY,OAC7B,MAAMC,EAAcC,cAGdC,EADUC,YAAO,IAAIC,IAAO,CAAEC,MAAON,EAAWO,OAAQP,KACzCQ,QAErB,IAAIC,EAAaN,EAAKM,WAGtB,OADAN,EAAKO,iBAAiBT,GAElB,mBAAKU,MAAOC,IAAMC,MACd,YAAC,IAAD,CACIV,KAAMA,EACNW,YAAcC,GACVZ,EAAKa,UAAUD,EAASE,IAAKF,EAASG,OAG9C,YAAC,IAAD,CACIN,MAAO,CACHO,QAAS,CACLC,IAAK,MACLC,KAAM,MACNC,MAAO,OACPC,OAAQ,OACRC,YAAa,OACbC,UAAW,0BAGnBC,eAAgB,IAAOjB,GAAa,EACpCkB,OAAQlB,GACPN,EAAKyB,OACF,oCAAgBzB,EAAKyB,OAArB,qBAEA,8DAEJ,mBAAKjB,MAAOC,IAAMiB,YAAa/C,QAASqB,EAAK2B,OAA7C,eA1BZ,ECRJjC,IAAMC,cAAc,QAqHLiC,UAnHF,KACT,MAAOC,EAAMC,GAAWvD,YAASwD,IAASC,QACnCnC,EAAWoC,GAAgB1D,YAAS,KACpC2D,EAAYC,GAAiB5D,YAAgC,OAC7D6D,EAAIC,GAAS9D,YAAwB,OACrC+D,EAAMC,GAAWhE,YAAsB,MAiB9C,OAfAiE,aAAU,KACN,GAAIX,IAASE,IAASU,OAAQ,OAC9B,MAAMC,EAAQC,cACdN,EAAMK,GACN,MAAME,EAAU,IAAIC,IAAKH,GAEzBE,EAAQE,GAAG,cAAeC,IACtBvD,QAAQwD,IAAI,aAEZb,EAAcY,EAAd,IAGJR,EAAQK,EAAR,GACD,CAACf,IAGA,mBAAKrB,MAAOC,GACR,YAAC,IAAD,CACIA,MAAO,CACHO,QAAS,CACLC,IAAK,MACLC,KAAM,MACNC,MAAO,OACPC,OAAQ,OACRC,YAAa,OACbC,UAAW,wBACX2B,OAAQ,OACRC,UACI,4DAERC,QAAS,CACLC,WAAY,UAGpB5B,OAAQK,IAASE,IAASC,OAC1B,sDACA,uBACA,uBACI,qBAAOqB,IAAI,cAAc,gBACzB,sBACIC,KAAK,aACLC,SAAWC,GACPvB,GAAeuB,EAAEC,OAA6BhF,QAElD,sBAAQA,MAAO,IAAf,SACA,sBAAQA,MAAO,GAAIiF,UAAQ,GAA3B,SAGA,sBAAQjF,MAAO,IAAf,WAGR,mBAAK+B,MAAOC,GACR,mBACID,MAAOC,EACP9B,QAAS,IAAMmD,EAAQC,IAAS4B,QAFpC,SAKA,mBACInD,MAAOC,EACP9B,QAAS,IAAMmD,EAAQC,IAASU,SAFpC,YAOR,YAAC,IAAD,CACIhC,MAAO,CACHO,QAAS,CACLC,IAAK,MACLC,KAAM,MACNC,MAAO,OACPC,OAAQ,OACRC,YAAa,OACbC,UAAW,wBACX2B,OAAQ,OACRC,UACI,4DAERC,QAAS,CACLC,WAAY,UAGpB5B,OAAQK,IAASE,IAASU,SAAWP,GACrC,0DAEI,uBAFJ,aAKA,uBACA,YAAC/D,EAAD,CACIC,SAAW,GAAEwF,OAAOhD,SAASiD,YAAYzB,MAC1C,KAENP,IAASE,IAASC,OAASH,IAASE,IAAS4B,MAC1C,YAAC,EAAD,CAAW9D,UAAWA,IAEtByC,GACAJ,GACI,YAAC,IAAD,CACI4B,MAAM,EACNjE,UAAWA,EACXqC,WAAYA,IArFhC,C","file":"route-home.chunk.4fe38.esm.js","sourcesContent":["import { h } from \"preact\";\r\nimport { useState } from \"preact/hooks\";\r\n\r\nexport function ClipboardCopy({ copyText }: { copyText: string }) {\r\n    const [isCopied, setIsCopied] = useState(false);\r\n\r\n    async function copyTextToClipboard(text: string) {\r\n        if (\"clipboard\" in navigator) {\r\n            return await navigator.clipboard.writeText(text);\r\n        } else {\r\n            return document.execCommand(\"copy\", true, text);\r\n        }\r\n    }\r\n\r\n    const handleCopyClick = () => {\r\n        copyTextToClipboard(copyText)\r\n            .then(() => {\r\n                setIsCopied(true);\r\n                setTimeout(() => {\r\n                    setIsCopied(false);\r\n                }, 1500);\r\n            })\r\n            .catch((err) => {\r\n                console.error(err);\r\n            });\r\n    };\r\n    return (\r\n        <div>\r\n            <input type=\"text\" value={copyText} readOnly />\r\n            <button onClick={handleCopyClick}>\r\n                <span>{isCopied ? \"Copied!\" : \"Copy\"}</span>\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"page\":\"page__U-UI-\",\"buttonWrapper\":\"buttonWrapper__SQENv\",\"button\":\"button__5kNlZ\"};","import { h } from \"preact\";\r\nimport { useRef } from \"preact/hooks\";\r\n\r\nimport { Gomoku } from \"src/models/game\";\r\nimport Grid from \"./grid\";\r\nimport style from \"./style.css\";\r\nimport Modal from \"react-modal\";\r\nimport { useUpdater } from \"src/utils/hooks/useUpdate\";\r\n\r\nModal.setAppElement(\"#app\");\r\n\r\nconst LocalGame = ({ boardSize = 15 }: { boardSize: number }) => {\r\n    const forceUpdate = useUpdater();\r\n\r\n    const gameRef = useRef(new Gomoku({ width: boardSize, height: boardSize }));\r\n    const game = gameRef.current;\r\n\r\n    let isGameOver = game.isGameOver;\r\n\r\n    game.addUpdateHandler(forceUpdate);\r\n    return (\r\n        <div class={style.root}>\r\n            <Grid\r\n                game={game}\r\n                onCellClick={(location) =>\r\n                    game.placeCell(location.row, location.col)\r\n                }\r\n            />\r\n            <Modal\r\n                style={{\r\n                    content: {\r\n                        top: \"50%\",\r\n                        left: \"50%\",\r\n                        right: \"auto\",\r\n                        bottom: \"auto\",\r\n                        marginRight: \"-50%\",\r\n                        transform: \"translate(-50%, -50%)\",\r\n                    },\r\n                }}\r\n                onRequestClose={() => (isGameOver = false)}\r\n                isOpen={isGameOver}>\r\n                {game.winner ? (\r\n                    <div>Way to go {game.winner} player! You won!</div>\r\n                ) : (\r\n                    <div>You are both losers! It was a draw.</div>\r\n                )}\r\n                <div class={style.resetButton} onClick={game.reset}>\r\n                    Play again\r\n                </div>\r\n            </Modal>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LocalGame;\r\n","import { h } from \"preact\";\nimport { useEffect, useState } from \"preact/hooks\";\nimport style from \"./style.css\";\nimport Modal from \"react-modal\";\n\nimport { v4 as uuid } from \"uuid\";\nimport Peer, { DataConnection } from \"peerjs\";\nimport { ClipboardCopy } from \"src/components/clipboard-copy\";\nimport { PlayMode } from \"src/models/game\";\nimport RemoteGame from \"src/components/game/remote\";\nimport LocalGame from \"src/components/game/local\";\n\nModal.setAppElement(\"#app\");\n\nconst Home = () => {\n    const [mode, setMode] = useState(PlayMode.UNSET);\n    const [boardSize, setBoardSize] = useState(15);\n    const [connection, setConnection] = useState<DataConnection | null>(null);\n    const [id, setId] = useState<string | null>(null);\n    const [peer, setPeer] = useState<Peer | null>(null);\n\n    useEffect(() => {\n        if (mode !== PlayMode.REMOTE) return;\n        const newId = uuid();\n        setId(newId);\n        const newPeer = new Peer(newId);\n\n        newPeer.on(\"connection\", (conn) => {\n            console.log(\"connected\");\n\n            setConnection(conn);\n        });\n\n        setPeer(newPeer);\n    }, [mode]);\n\n    return (\n        <div class={style.page}>\n            <Modal\n                style={{\n                    content: {\n                        top: \"50%\",\n                        left: \"50%\",\n                        right: \"auto\",\n                        bottom: \"auto\",\n                        marginRight: \"-50%\",\n                        transform: \"translate(-50%, -50%)\",\n                        border: \"none\",\n                        boxShadow:\n                            \"0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23)\",\n                    },\n                    overlay: {\n                        background: \"unset\",\n                    },\n                }}\n                isOpen={mode === PlayMode.UNSET}>\n                <div>How would you like to play?</div>\n                <br />\n                <div>\n                    <label for=\"board-size\">{\"Board Size: \"}</label>\n                    <select\n                        name=\"board-size\"\n                        onChange={(e) =>\n                            setBoardSize(+(e.target as HTMLOptionElement).value)\n                        }>\n                        <option value={10}>10x10</option>\n                        <option value={15} selected>\n                            15x15\n                        </option>\n                        <option value={19}>19x19</option>\n                    </select>\n                </div>\n                <div class={style.buttonWrapper}>\n                    <div\n                        class={style.button}\n                        onClick={() => setMode(PlayMode.LOCAL)}>\n                        Local\n                    </div>\n                    <div\n                        class={style.button}\n                        onClick={() => setMode(PlayMode.REMOTE)}>\n                        Online\n                    </div>\n                </div>\n            </Modal>\n            <Modal\n                style={{\n                    content: {\n                        top: \"50%\",\n                        left: \"50%\",\n                        right: \"auto\",\n                        bottom: \"auto\",\n                        marginRight: \"-50%\",\n                        transform: \"translate(-50%, -50%)\",\n                        border: \"none\",\n                        boxShadow:\n                            \"0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23)\",\n                    },\n                    overlay: {\n                        background: \"unset\",\n                    },\n                }}\n                isOpen={mode === PlayMode.REMOTE && !connection}>\n                <div>\n                    Send this link to your friend...\n                    <br />\n                    or enemy.\n                </div>\n                <br />\n                <ClipboardCopy\n                    copyText={`${window.location.origin}?g=${id}`}\n                />{\" \"}\n            </Modal>\n            {mode !== PlayMode.UNSET && mode === PlayMode.LOCAL ? (\n                <LocalGame boardSize={boardSize} />\n            ) : (\n                peer &&\n                connection && (\n                    <RemoteGame\n                        host={true}\n                        boardSize={boardSize}\n                        connection={connection}\n                    />\n                )\n            )}\n        </div>\n    );\n};\n\nexport default Home;\n"],"sourceRoot":""}